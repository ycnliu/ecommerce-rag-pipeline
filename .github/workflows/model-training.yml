name: Model Training Pipeline

on:
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Type of model to train'
        required: true
        default: 'clip_finetuning'
        type: choice
        options:
        - clip_finetuning
        - embedding_fusion
      data_path:
        description: 'Path to training data'
        required: true
        default: 'data/sample_products.csv'
      epochs:
        description: 'Number of training epochs'
        required: true
        default: '5'
        type: string
      use_wandb:
        description: 'Use Weights & Biases logging'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.9'
  WANDB_PROJECT: 'ecommerce-rag-pipeline'

jobs:
  train-model:
    runs-on: ubuntu-latest
    timeout-minutes: 480  # 8 hours max

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install wandb

    - name: Login to Weights & Biases
      if: ${{ github.event.inputs.use_wandb == 'true' }}
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
      run: |
        wandb login

    - name: Download training data
      run: |
        # Add logic to download/prepare training data
        mkdir -p data
        # Example: Download from cloud storage, database, etc.
        echo "Downloading training data..."

    - name: Train CLIP Fine-tuning Model
      if: ${{ github.event.inputs.model_type == 'clip_finetuning' }}
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        WANDB_PROJECT: ${{ env.WANDB_PROJECT }}
      run: |
        python -m src.cli train-clip \
          --data-path ${{ github.event.inputs.data_path }} \
          --epochs ${{ github.event.inputs.epochs }} \
          --output-dir models/fine_tuned \
          --use-wandb ${{ github.event.inputs.use_wandb }}

    - name: Train Embedding Fusion Model
      if: ${{ github.event.inputs.model_type == 'embedding_fusion' }}
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        WANDB_PROJECT: ${{ env.WANDB_PROJECT }}
      run: |
        python -m src.cli train-fusion \
          --data-path ${{ github.event.inputs.data_path }} \
          --epochs ${{ github.event.inputs.epochs }} \
          --output-dir models/fusion \
          --use-wandb ${{ github.event.inputs.use_wandb }}

    - name: Evaluate trained model
      run: |
        python -m src.cli evaluate-model \
          --model-path models/ \
          --test-data ${{ github.event.inputs.data_path }} \
          --output-file evaluation_results.json

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-model-${{ github.event.inputs.model_type }}-${{ github.run_number }}
        path: |
          models/
          evaluation_results.json
          *.log

    - name: Push to Hugging Face Hub
      if: success()
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        python -m src.cli push-to-hub \
          --model-path models/ \
          --repo-name ecommerce-rag-${{ github.event.inputs.model_type }} \
          --private false

  notify-completion:
    runs-on: ubuntu-latest
    needs: [train-model]
    if: always()

    steps:
    - name: Notify Slack on success
      if: needs.train-model.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Model training completed successfully for ${{ github.event.inputs.model_type }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: needs.train-model.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Model training failed for ${{ github.event.inputs.model_type }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}